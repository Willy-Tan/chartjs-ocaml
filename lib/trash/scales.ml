open Js_of_ocaml

module Typ = struct

  type t = Js.js_string Js.t

  let category = Js.string "category"

  let linear = Js.string "linear"

  let logarithmic = Js.string "logarithmic"

  let time = Js.string "time"

  let make s = Js.string s

end

module Scale_label = struct

  class type t = object
    method display : bool Js.t Js.prop
    (** If true, display the axis title. *)

    method labelString : Js.js_string Js.t Js.prop
    (** The text for the title. (i.e. "# of People" or "Response Choices"). *)

    method lineHeight : unit (* FIXME *)
    (** Height of an individual line of text. *)

    method fontColor : Color.t Js.prop
    (** Font color for scale title. *)

    method fontFamily : Js.js_string Js.t Js.prop
    (** Font family for the scale title, follows CSS font-family options. *)

    method fontSize : int Js.prop
    (** Font size for scale title. *)

    method fontStyle : Js.js_string Js.t Js.prop
    (** Font style for the scale title, follows CSS font-style options
        (i.e. normal, italic, oblique, initial, inherit) *)

    method padding : Padding.t Js.t Js.prop
    (** Padding to apply around scale labels.
        Only top and bottom are implemented. *)

  end

  (* val make : ?display:bool ->
   *   ?label_string:string ->
   *   ?line_height:line_height ->
   *   ?font_color:Color.t ->
   *   ?font_family:Font_family.t ->
   *   ?font_size:int ->
   *   ?font_style:Font_style.t ->
   *   ?padding:Padding.t ->
   *   unit ->
   *   t [@@js.builder] *)
end

module Grid_lines = struct

  class type t = object

    method display : bool Js.t Js.prop
    (** If [false], do not display grid lines for this axis. *)

    method circular : bool Js.t Js.prop
    (** If [true], gridlines are circular (on radar chart only). *)

    method color : Color.t Js.t Indexable.t Js.t Js.prop
    (** The color of the grid lines. If specified as an array,
        the first color applies to the first grid line, the second
        to the second grid line and so on. *)

    method borderDash : int Js.js_array Js.t Js.prop

    method borderDashOffset : int Js.prop

  end

  (** Length and spacing of dashes on grid lines. *)
  val border_dash : t -> border_dash
  val set_border_dash : t -> border_dash -> unit

  (** Offset for line dashes. *)
  val border_dash_offset : t -> border_dash_offset
  val set_border_dash_offset : t -> border_dash_offset -> unit

  (** Stroke width of grid lines. *)
  val line_width : t -> int indexable
  val set_line_width : t -> int indexable -> unit

  (** If true, draw border at the edge between the axis and the chart area. *)
  val draw_border : t -> bool
  val set_draw_border : t -> bool -> unit

  (** If true, draw lines on the chart area inside the axis lines.
      This is useful when there are multiple axes and you need to
      control which grid lines are drawn. *)
  val draw_on_chart_area : t -> bool
  val set_draw_on_chart_area : t -> bool -> unit

  (** If true, draw lines beside the ticks in the axis area beside the chart. *)
  val draw_ticks : t -> bool
  val set_draw_ticks : t -> bool -> unit

  (** Length in pixels that the grid lines will draw into the axis area. *)
  val tick_mark_length : t -> int
  val set_tick_mark_length : t -> int -> unit

  (** Stroke width of the grid line for the first index (index 0). *)
  val zero_line_width : t -> int
  val set_zero_line_width : t -> int -> unit

  (** Stroke color of the grid line for the first index (index 0). *)
  val zero_line_color : t -> Color.t
  val set_zero_line_color : t -> Color.t -> unit

  (** Length and spacing of dashes of the grid line
      for the first index (index 0). *)
  val zero_line_border_dash : t -> border_dash
  val set_zero_line_border_dash : t -> border_dash -> unit

  (** Offset for line dashes of the grid line for the first index (index 0). *)
  val zero_line_border_dash_offset : t -> border_dash_offset
  val set_zero_line_border_dash_offset : t -> border_dash_offset -> unit

  (** If true, grid lines will be shifted to be between labels.
      This is set to true for a category scale in a bar chart by default. *)
  val offset_grid_lines : t -> bool
  val set_offset_grid_lines : t -> bool -> unit

  val make : ?display:bool ->
    ?circular:bool ->
    ?color:Color.t indexable ->
    ?border_dash:border_dash ->
    ?border_dash_offset:border_dash_offset ->
    ?line_width:int indexable ->
    ?draw_border:bool ->
    ?draw_on_chart_area:bool ->
    ?draw_ticks:bool ->
    ?tick_mark_length:int ->
    ?zero_line_width:int ->
    ?zero_line_color:Color.t ->
    ?zero_line_border_dash:border_dash ->
    ?zero_line_border_dash_offset:border_dash_offset ->
    ?offset_grid_lines:bool ->
    unit ->
    t [@@js.builder]

end

(** The tick configuration is nested under the scale configuration
    in the ticks key. It defines options for the tick marks that are
    generated by the axis.*)
module Ticks = struct

  type callback = value:Ojs.t -> index:int -> values:Ojs.t -> string option

  (** The minorTick configuration is nested under the ticks configuration
      in the minor key. It defines options for the minor tick marks that are
      generated by the axis. Omitted options are inherited from ticks
      configuration. *)
  module Minor_major : sig
    type t

    (** Returns the string representation of the tick value
        as it should be displayed on the chart. *)
    val callback : t -> callback
    val set_callback : t -> callback -> unit

    (** Font color for tick labels. *)
    val font_color : t -> Color.t
    val set_font_color : t -> Color.t -> unit

    (** Font family for the tick labels, follows CSS font-family options. *)
    val font_family : t -> Font_family.t
    val set_font_family : t -> Font_family.t -> unit

    (** Font size for the tick labels. *)
    val font_size : t -> int
    val set_font_size : t -> int -> unit

    (** Font style for the tick labels, follows CSS font-style options
        (i.e. normal, italic, oblique, initial, inherit). *)
    val font_style : t -> Font_style.t
    val set_font_style : t -> Font_style.t -> unit

  end

  type t

  (** Returns the string representation of the tick value as
      it should be displayed on the chart. *)
  val callback : t -> callback
  val set_callback : t -> callback -> unit

  (** If true, show tick marks. *)
  val display : t -> bool
  val set_display : t -> bool -> unit

  (** Font color for tick labels. *)
  val font_color : t -> Color.t
  val set_font_color : t -> Color.t -> unit

  (** Font family for the tick labels, follows CSS font-family options. *)
  val font_family : t -> Font_family.t
  val set_font_family : t -> Font_family.t -> unit

  (** Font size for the tick labels. *)
  val font_size : t -> int
  val set_font_size : t -> int -> unit

  (** Font style for the tick labels, follows CSS font-style options
      (i.e. normal, italic, oblique, initial, inherit). *)
  val font_style : t -> Font_style.t
  val set_font_style : t -> Font_style.t -> unit

  (** Reverses order of tick labels. *)
  val reverse : t -> bool
  val set_reverse : t -> bool -> unit

  (** Minor ticks configuration. Omitted options are inherited
      from options above. *)
  val minor : t -> Minor_major.t
  val set_minor : t -> Minor_major.t -> unit

  (** Major ticks configuration. Omitted options are inherited
      from options above.*)
  val major : t -> Minor_major.t
  val set_major : t -> Minor_major.t -> unit

  val make : ?callback:callback ->
    ?display:bool ->
    ?font_color:Color.t ->
    ?font_family:Font_family.t ->
    ?font_size:int ->
    ?font_style:Font_style.t ->
    ?reverse:bool ->
    ?minor:Minor_major.t ->
    ?major:Minor_major.t ->
    unit ->
    t

end

type t

module Cartesian = struct
  open Cartesian
  type position = Cartesian.position

  module Ticks = struct
    include Ticks
    include (Common_ticks : module type of Common_ticks with type t := Ticks.t)
  end

  module Category = struct

    module Ticks = struct
      include Ticks
      include (Category.Ticks : module type of Category.Ticks
                                               with type t := Ticks.t)
    end
    include Common
    include (Category : module type of Category with module Ticks := Ticks)
    let make ?(type_ = `Category) = make ~type_
  end

  module Linear = struct

    module Ticks = struct
      include Ticks
      include (Linear.Ticks : module type of Linear.Ticks
                                             with type t := Ticks.t)
    end
    include Common
    include (Linear : module type of Linear with module Ticks := Ticks)
    let make ?(type_ = `Linear) = make ~type_
  end

  module Logarithmic = struct

    module Ticks = struct
      include Ticks
      include (Logarithmic.Ticks : module type of Logarithmic.Ticks
                                                  with type t := Ticks.t)
    end

    include Common
    include (Logarithmic : module type of Logarithmic
                                          with module Ticks := Ticks)
    let make ?(type_ = `Logarithmic) = make ~type_
  end

  module Time = struct

    module Ticks = struct
      include Ticks
      include (Time.Ticks : module type of Time.Ticks
                                           with type t := Ticks.t)
    end

    include Common
    include (Time : module type of Time with module Ticks := Ticks)
    let make ?(type_ = `Time) = make ~type_
  end

end

module Radial = struct
  open Radial

  module Linear = struct

    module Ticks = struct
      include Ticks
      include (Linear.Ticks : module type of Linear.Ticks
                                     with type t := Ticks.t)
    end

    include Common
    include (Linear : module type of Linear with module Ticks := Ticks)
  end

end
