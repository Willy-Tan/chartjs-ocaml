open Js_of_ocaml
open Types

type 'a tick_cb = ('a -> int -> 'a Js.js_array Js.t) Js.callback

module Axis_type = struct
  type t = Js.js_string Js.t

  let category = Js.string "category"
  let linear = Js.string "linear"
  let logarithmic = Js.string "logarithmic"
  let time = Js.string "time"

  module Unsafe = struct
    let of_string s = Js.string s
    let to_string t = Js.to_string t
  end
end

module Time_ticks_source = struct
  type t = Js.js_string Js.t

  let auto = Js.string "auto"
  let data = Js.string "data"
  let labels = Js.string "labels"

  module Unsafe = struct
    let of_string s = Js.string s
    let to_string t = Js.to_string t
  end
end

module Time_distribution = struct
  type t = Js.js_string Js.t

  let linear = Js.string "linear"
  let series = Js.string "series"
end

module Time_bounds = struct
  type t = Js.js_string Js.t

  let data = Js.string "data"
  let ticks = Js.string "ticks"
end

module Time_unit = struct
  type t = Js.js_string Js.t

  let millisecond = Js.string "millisecond"
  let second = Js.string "second"
  let minute = Js.string "minute"
  let hour = Js.string "hour"
  let day = Js.string "day"
  let week = Js.string "week"
  let month = Js.string "month"
  let quarter = Js.string "quarter"
  let year = Js.string "year"

  module Unsafe = struct
    let of_string s = Js.string s
    let to_string t = Js.to_string t
  end
end

(** The minorTick configuration is nested under the ticks configuration
    in the [minor] key. It defines options for the minor tick marks that are
    generated by the axis. Omitted options are inherited from ticks
    configuration. *)
class type minorTicks = object

  method callback : 'a tick_cb Js.prop
  (** Returns the string representation of the tick value
      as it should be displayed on the chart. *)

  method fontColor : Color.t Js.prop
  (** Font color for tick labels. *)

  method fontFamily : Js.js_string Js.t Js.prop
  (** Font family for the tick labels, follows CSS font-family options. *)

  method fontSize : int Js.prop
  (** Font size for the tick labels. *)

  method fontStyle : Js.js_string Js.t Js.prop
  (** Font style for the tick labels, follows CSS font-style options
      (i.e. normal, italic, oblique, initial, inherit). *)

end

(** The majorTick configuration is nested under the ticks configuration
    in the [major] key. It defines options for the major tick marks that are
    generated by the axis. Omitted options are inherited from ticks configuration.
    These options are disabled by default. *)
class type majorTicks = minorTicks

(** The tick configuration is nested under the scale configuration
    in the ticks key. It defines options for the tick marks that are
    generated by the axis.*)
class type ticks = object

  method callback : 'a tick_cb Js.prop
  (** Returns the string representation of the tick value as
      it should be displayed on the chart. *)

  method display : bool Js.t Js.prop
  (** If [true], show tick marks. *)

  method fontColor : Color.t Js.prop
  (** Font color for tick labels. *)

  method fontFamily : Js.js_string Js.t Js.prop
  (** Font family for the tick labels, follows CSS font-family options. *)

  method fontSize : int Js.prop
  (** Font size for the tick labels. *)

  method fontStyle : Js.js_string Js.t Js.prop
  (** Font style for the tick labels, follows CSS font-style options
      (i.e. normal, italic, oblique, initial, inherit). *)

  method reverse : bool Js.t Js.prop
  (** Reverses order of tick labels. *)

  method minor : minorTicks Js.t
  (** Minor ticks configuration. Omitted options are inherited
      from options above. *)

  method major : majorTicks Js.t
  (** Major ticks configuration. Omitted options are inherited
      from options above.*)

end

class type scaleLabel = object

  method display : bool Js.t Js.prop
  (** If true, display the axis title. *)

  method labelString : Js.js_string Js.t Js.prop
  (** The text for the title. (i.e. "# of People" or "Response Choices"). *)

  method lineHeight : Line_height.t Js.prop
  (** Height of an individual line of text. *)

  method fontColor : Color.t Js.prop
  (** Font color for scale title. *)

  method fontFamily : Js.js_string Js.t Js.prop
  (** Font family for the scale title, follows CSS font-family options. *)

  method fontSize : int Js.prop
  (** Font size for scale title. *)

  method fontStyle : Js.js_string Js.t Js.prop
  (** Font style for the scale title, follows CSS font-style options
      (i.e. normal, italic, oblique, initial, inherit) *)

  method padding : Padding.t Js.t Js.prop
  (** Padding to apply around scale labels.
      Only top and bottom are implemented. *)

end

class type gridLines = object

  method display : bool Js.t Js.prop
  (** If [false], do not display grid lines for this axis. *)

  method circular : bool Js.t Js.prop
  (** If [true], gridlines are circular (on radar chart only). *)

  method color : Color.t Js.t Indexable.t Js.t Js.prop
  (** The color of the grid lines. If specified as an array,
      the first color applies to the first grid line, the second
      to the second grid line and so on. *)

  method borderDash : line_dash Js.prop
  (** Length and spacing of dashes on grid lines. *)

  method borderDashOffset : line_dash_offset Js.prop
  (** Offset for line dashes. *)

  method lineWidth : int Indexable.t Js.t Js.prop
  (** Stroke width of grid lines. *)

  method drawBorder : bool Js.t Js.prop
  (** If true, draw border at the edge between the axis and the chart area. *)

  method drawOnChartArea : bool Js.t Js.prop
  (** If true, draw lines on the chart area inside the axis lines.
      This is useful when there are multiple axes and you need to
      control which grid lines are drawn. *)

  method drawTicks : bool Js.t Js.prop
  (** If true, draw lines beside the ticks in the axis area beside the chart. *)

  method tickMarkLength : int Js.prop
  (** Length in pixels that the grid lines will draw into the axis area. *)

  method zeroLineWidth : int Js.prop
  (** Stroke width of the grid line for the first index (index 0). *)

  method zeroLineColor : int Js.prop
  (** Stroke color of the grid line for the first index (index 0). *)

  method zeroLineBorderDash : line_dash Js.prop
  (** Length and spacing of dashes of the grid line
      for the first index (index 0). *)

  method zeroLineBorderDashOffset : line_dash_offset Js.prop
  (** Offset for line dashes of the grid line for the first index (index 0). *)

  method offsetGridLines : bool Js.t Js.prop
  (** If true, grid lines will be shifted to be between labels.
      This is set to true for a category scale in a bar chart by default. *)

end

(** {1 Cartesian axes} *)

module Cartesian = struct

  (** {2 Base types for cartesian axis} *)

  class type cartesianTicks = object
    inherit ticks

    method autoSkip : bool Js.t Js.prop
    (** If [true], automatically calculates how many labels that
        can be shown and hides labels accordingly. Turn it off to show all
        labels no matter what. *)

    method autoSkipPadding : int Js.prop
    (** Padding between the ticks on the horizontal axis when autoSkip is
        enabled. Note: Only applicable to horizontal scales. *)

    method labelOffset : int Js.prop
    (** Distance in pixels to offset the label from the centre point of the
        tick (in the y direction for the x axis, and the x direction for the
        y axis). Note: this can cause labels at the edges to be cropped by the
        edge of the canvas. *)

    method maxRotation : int Js.prop
    (** Maximum rotation for tick labels when rotating to condense labels.
        Note: Rotation doesn't occur until necessary.
        Note: Only applicable to horizontal scales. *)

    method minRotation : int Js.prop
    (** Minimum rotation for tick labels.
        Note: Only applicable to horizontal scales. *)

    method mirror : bool Js.prop
    (** Flips tick labels around axis, displaying the labels inside the chart
        instead of outside. Note: Only applicable to vertical scales. *)

    method padding : int Js.prop
    (** Padding between the tick label and the axis. When set on a vertical axis,
        this applies in the horizontal (X) direction. When set on a horizontal
        axis, this applies in the vertical (Y) direction. *)
  end

  class type ['a] cartesianAxis = object

    method _type : Axis_type.t Js.prop
    (** Type of scale being employed.
        Custom scales can be created and registered with a string key.
        This allows changing the type of an axis for a chart. *)

    method position : Position.t Js.prop
    (** Position of the axis in the chart.
        Possible values are: 'top', 'left', 'bottom', 'right' *)

    method offset : bool Js.t Js.prop
    (** If [true], extra space is added to the both edges and the axis
        is scaled to fit into the chart area. This is set to true for a
        category scale in a bar chart by default. *)

    method id : Js.js_string Js.t Js.prop
    (** The ID is used to link datasets and scale axes together. *)

    method gridLines : gridLines Js.t Js.prop
    (** Grid line configuration. *)

    method scaleLabel : scaleLabel Js.t Js.prop
    (** Scale title configuration. *)

    method ticks : (#cartesianTicks as 'a) Js.t Js.prop
    (** Tick configuration. *)

  end

  (** {2 Category axis} *)

  class type categoryTicks = object
    inherit cartesianTicks

    method labels : Js.js_string Js.t Js.prop
    (** An array of labels to display. *)

    method min : Js.js_string Js.t Js.optdef_prop
    (** The minimum item to display. *)

    method max : Js.js_string Js.t Js.optdef_prop
    (** The maximum item to display. *)
  end

  and categoryAxis = [categoryTicks] cartesianAxis

  (** {2 Linear axis} *)

  class type linearTicks = object
    inherit cartesianTicks

    method beginAtZero : bool Js.t Js.optdef_prop
    (** If [true], scale will include 0 if it is not already included. *)

    method min : float Js.optdef_prop
    (** User defined minimum number for the scale,
        overrides minimum value from data. *)

    method max : float Js.optdef_prop
    (** User defined maximum number for the scale,
        overrides maximum value from data. *)

    method maxTicksLimit : int Js.prop
    (** Maximum number of ticks and gridlines to show. *)

    method precision : int Js.optdef_prop
    (** If defined and stepSize is not specified,
        the step size will be rounded to this many decimal places. *)

    method stepSize : int Js.optdef_prop
    (** User defined fixed step size for the scale. *)

    method suggestedMax : float Js.optdef_prop
    (** Adjustment used when calculating the maximum data value. *)

    method suggestedMin : float Js.optdef_prop
    (** Adjustment used when calculating the minimum data value. *)
  end

  and linearAxis = [linearTicks] cartesianAxis

  (** {2 Logarithmic axis} *)

  class type logarithmicTicks = object
    inherit cartesianTicks

    method min : float Js.optdef_prop
    (** User defined minimum number for the scale,
        overrides minimum value from data. *)

    method max : float Js.optdef_prop
    (** User defined maximum number for the scale,
        overrides maximum value from data. *)
  end

  and logarithmicAxis = [logarithmicTicks] cartesianAxis

  (** {2 Time axis} *)

  (** The following display formats are used to configure
      how different time units are formed into strings for
      the axis tick marks. *)
  class type timeDisplayFormats = object
    method millisecond : Js.js_string Js.t Js.prop
    method second : Js.js_string Js.t Js.prop
    method minute : Js.js_string Js.t Js.prop
    method hour : Js.js_string Js.t Js.prop
    method day : Js.js_string Js.t Js.prop
    method week : Js.js_string Js.t Js.prop
    method month : Js.js_string Js.t Js.prop
    method quarter : Js.js_string Js.t Js.prop
    method year : Js.js_string Js.t Js.prop
  end

  and timeTicks = object
    inherit cartesianTicks

    method source : Time_ticks_source.t Js.prop
    (** How ticks are generated.
        [auto]: generates "optimal" ticks based on scale size and time options
        [data]: generates ticks from data (including labels from data objects)
        [labels]: generates ticks from user given data.labels values ONLY *)
  end

  and timeOptions = object
    method displayFormats : timeDisplayFormats Js.t Js.optdef_prop
    (** Sets how different time units are displayed. *)

    method isoWeekday : bool Js.t Js.prop
    (** If [true] and the unit is set to 'week', then the first day
        of the week will be Monday. Otherwise, it will be Sunday. *)

    method max : Time.t Js.optdef_prop
    (** If defined, this will override the data maximum *)

    method min : Time.t Js.optdef_prop
    (** If defined, this will override the data minimum *)

    method _parser : unit Js.optdef_prop (* FIXME *)
    (** Custom parser for dates. *)

    method round : Time_unit.t Or_false.t Js.t Js.prop
    (** If defined, dates will be rounded to the start of this unit. *)

    method tooltipFormat : Js.js_string Js.t Js.optdef_prop
    (** The moment js format string to use for the tooltip. *)

    method unit : Time_unit.t Or_false.t Js.t Js.prop
    (** If defined, will force the unit to be a certain type. *)

    method stepSize : int Js.prop
    (** The number of units between grid lines. *)

    method minUnit : Time_unit.t Js.prop
    (** The minimum display format to be used for a time unit. *)
  end

  and timeAxis = object
    inherit [timeTicks] cartesianAxis

    method time : timeOptions Js.t Js.prop

    method distribution : Time_distribution.t Js.prop
    (** The distribution property controls the data distribution along the scale:
        [linear]: data are spread according to their time (distances can vary)
        [series]: data are spread at the same distance from each other *)

    method bounds : Time_bounds.t Js.prop
    (** The bounds property controls the scale boundary strategy
        (bypassed by [min]/[max] time options).
        [data]: makes sure data are fully visible, labels outside are removed
        [ticks]: makes sure ticks are fully visible, data outside are truncated *)
  end

end

module CoerceTo = struct
  (* TODO add coercion functions for axes *)
end

class type scales = object
  method xAxes : 'a Js.t Js.js_array Js.t Js.optdef_prop
  method yAxes : 'a Js.t Js.js_array Js.t Js.optdef_prop
end
